/////////////// LOAD DATA

// Define the bounding box geometry of the Great Salt Lake
var geometry = ee.Geometry.Polygon(
        [[[-113.14050109901953, 41.728451296684945],
          [-113.14050109901953, 40.62038097715779],
          [-111.75622375526953, 40.62038097715779],
          [-111.75622375526953, 41.728451296684945]]], null, false)

// Load Landsat 8 collection and filter by date and location
// Metadata: https://developers.google.com/earth-engine/datasets/catalog/LANDSAT_LC08_C02_T1_L2
var dataset = ee.ImageCollection("LANDSAT/LC08/C02/T1_L2")
    .filterBounds(geometry)  
    .filterDate('2013-01-01', '2023-01-01');  

// Visualize the region 
var region = geometry;
Map.addLayer(region)

///////////////

/////////////// DEFINE FUNCTIONS

// Define a function that calculates a constanct value.
// This function creates values of 1 for all pixels and then add them to a new band.
var constant = function(image) {
  var fun = ee.Image(0).expression(
    '((SR_B2) / (SR_B2))', {
      'SR_B2': image.select('SR_B2'),
    });
  return image.addBands(fun.rename('cte'));
};

// Define a function that masks the images for water pixels
// The values of 7 from the band QA_PIXEL are categorized as water.
// The Landsat QA_PIXEL band uses individual bits within its binary values to represent 
//   different qualities or conditions of a pixel. By shifting the binary value 1 seven places 
//   to the left, we are essentially creating a mask that has only the seventh bit (bit seven) set to 1, 
//   while all other bits are set to 0. 
// This bit mask is then used in a bitwiseAND operation with the QA_PIXEL band. When we perform a bitwiseAND 
//   between the QA band and this mask, we effectively extract the information stored in the seventh bit of 
//   the QA band for each pixel. This information could indicate the presence or absence of a specific condition, 
//   such as the pixel being classified as water.
function maskWater(image) {
    var Water = (1 << 7)
    var pixel_qa = image.select('QA_PIXEL');
    var mask = pixel_qa.bitwiseAnd(Water);
    var mask2 = image.mask().reduce(ee.Reducer.min());
    return image.updateMask(mask).updateMask(mask2);
}

// Define a function that applies scaling factors to the optical bands of 
//   the image for visualization purposes.
function applyScaleFactors(image) {
  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
  return image.addBands(opticalBands, null, true);
}

///////////////

/////////////// APPLY DEFINED FUNCTIONS

// Create a new band with a constant value of 1 for all pixels.
// The new dataset is called dataset_cte.
var dataset_cte = dataset.map(constant);
print(dataset_cte)

// Apply the mask function to the new dataset
var waterImages = dataset_cte.map(maskWater);
print(waterImages)

// Apply the scaling faction function
var scaled_waterImages = waterImages.map(applyScaleFactors);
var visualization = {
  bands: ['SR_B3', 'SR_B2', 'SR_B1'],
  min: 0.0,
  max: 0.3,
};

// Apply the maximum function to the scaled images and visualize the max values
var clippedImages = scaled_waterImages.map(function(image) {
  return image.clip(geometry);
});
Map.addLayer(clippedImages.max(), visualization, 'True Color (321)');

///////////////


/////////////// CREATE TIMESERIES CHARTS.

// Create a timeseries chart of the number of inundated pixels.
var timeSeries = ui.Chart.image.seriesByRegion({
    imageCollection: waterImages.select('cte'),
    regions: region,
    reducer: ee.Reducer.sum(),
    scale: 30, // scale
    xProperty: 'system:time_start',
    seriesProperty: 'GreatSaltLake'
});

// Print the chart to the Console
print(timeSeries);





