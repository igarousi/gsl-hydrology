// Load Landsat 5 collection and filter by date and location
var geometry = ee.Geometry.Polygon(
        [[[-113.14050109901953, 41.728451296684945],
          [-113.14050109901953, 40.62038097715779],
          [-111.75622375526953, 40.62038097715779],
          [-111.75622375526953, 41.728451296684945]]], null, false)
var dataset = ee.ImageCollection("LANDSAT/LC08/C02/T1_L2")
    .filterBounds(geometry)  // Adjust the coordinates accordingly
    .filterDate('2013-01-01', '2023-01-01');     // Add desired date range

// // Function to mask clouds using the pixel_qa band of Landsat 8
// function maskClouds(image) {
//     var dilatedCloud =(1 << 1)
//     var cloud = (1 << 3)
//     var cloudShadow = (1 << 4)
//     var pixel_qa = image.select('QA_PIXEL');
//     var mask = pixel_qa.bitwiseAnd(dilatedCloud).or(cloud).or(cloudShadow);
//     var mask2 = image.mask().reduce(ee.Reducer.min());
//     return image.updateMask(mask.not()).updateMask(mask2);
// }

// // Apply cloud masking function to the image collection
// var clearImages = dataset.map(maskClouds);
// print(clearImages)

// Define the region of interest
var region = geometry;
Map.addLayer(region)

var constant = function(image) {
  var fun = ee.Image(0).expression(
    '((SR_B2) / (SR_B2))', {
      'SR_B2': image.select('SR_B2'),
    });
  return image.addBands(fun.rename('cte'));
};

function maskWater(image) {
    var Water =(1 << 7)
    var pixel_qa = image.select('QA_PIXEL');
    var mask = pixel_qa.bitwiseAnd(Water);
    var mask2 = image.mask().reduce(ee.Reducer.min());
    return image.updateMask(mask).updateMask(mask2);
}

var dataset_cte = dataset.map(constant);
print(dataset_cte)

var waterImages = dataset_cte.map(maskWater);
print(waterImages)


// Applies scaling factors.
function applyScaleFactors(image) {
  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
  return image.addBands(opticalBands, null, true);
}

var scaled_waterImages = waterImages.map(applyScaleFactors);

var visualization = {
  bands: ['SR_B3', 'SR_B2', 'SR_B1'],
  min: 0.0,
  max: 0.3,
};

Map.addLayer(scaled_waterImages.max(), visualization, 'True Color (321)');



////////////////////////////////

// //modNDWI (modified Normalized Difference Water Index)
// //MNDWI = (GREEN âˆ’ SWIR)/(GREEN + SWIR)
// var mndwi = function(image) {
//   var fun_mndwi = ee.Image(0).expression(
//     '((SR_B2 - SR_B5) / (SR_B2 + SR_B5))', {
//       'SR_B2': image.select('SR_B2'),
//       'SR_B5': image.select('SR_B5'),
//     });
//   return image.addBands(fun_mndwi.rename('mndwi'));
// };
// Add a Function which removes pixels

// var h2opixel = function(image) {
// var maskpixel = image.select('mndwi').gt(-0.1);
//   return image.mask(maskpixel);
// };

// ////Map function over image collection
// var collection_mndwi = clearImages.map(mndwi)
//   .select('mndwi'); //now only 1 banded images

// var FinalDataset = collection_mndwi.map(h2opixel);

// Create a time series chart of Great Salt Lake area
var timeSeries = ui.Chart.image.seriesByRegion({
    imageCollection: waterImages.select('cte'),
    regions: region,
    reducer: ee.Reducer.sum(),
    scale: 30, // Adjust the scale as needed
    xProperty: 'system:time_start',
    seriesProperty: 'GreatSaltLake'
});

// Print the chart to the Console
print(timeSeries);


